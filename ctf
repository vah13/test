****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of BSides Vancouver 2018 (Workshop)

Boot2root challenges aim to create a safe environment where you can perform real-world penetration testing on an (intentionally) vulnerable target.
This workshop will provide you with a custom-made VM where the goal is to obtain root level access on it. 
This is a great chance for people who want to get into pentesting but don’t know where to start. *
If this sounds intimidating, don’t worry! During the workshop, we’ll be discussing various methodologies, common pitfalls and useful tools at every step of our pentest.
Requirements:

Laptop capable of running two VMs and has a USB port.
At least 20GB of free space.
VirtualBox pre-installed.
Kali VM
Some familiarity with CLI.


****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of DerpNStink 1

Difficulty:
Beginner
Description:
Mr. Derp and Uncle Stinky are two system administrators who are starting their own company, DerpNStink. Instead of hiring qualified professionals to build up their IT landscape, they decided to hack together their own system which is almost ready to go live...
Instructions:
This is a boot2root Ubuntu based virtual machine. It was tested on VMware Fusion and VMware Workstation12 using DHCP settings for its network interface. It was designed to model some of the earlier machines I encountered during my OSCP labs also with a few minor curve-balls but nothing too fancy. Stick to your classic hacking methodology and enumerate all the things!
Your goal is to remotely attack the VM and find all 4 flags eventually leading you to full root access. Don't forget to #tryharder
Example: flag1(AB0BFD73DAAEC7912DCDCA1BA0BA3D05). Do not waste time decrypting the hash in the flag as it has no value in the challenge other than an identifier.
Contact
Hit me up if you enjoy this VM!
Twitter: @securekomodo
Email: <a class="__cf_email__" data-cfemail="046c65676f617666767d656a4474766b706b6a69656d682a676b69" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Bulldog 1

Bulldog Industries recently had its website defaced and owned by the malicious German Shepherd Hack Team. Could this mean there are more vulnerabilities to exploit? Why don't you find out? :) 
This is a standard Boot-to-Root. Your only goal is to get into the root directory and see the congratulatory message, how you do it is up to you! 
Difficulty: Beginner/Intermediate, if you get stuck, try to figure out all the different ways you can interact with the system. That's my only hint ;)
Made by Nick Frichette (frichetten.com) Twitter: @frichette_n
I'd highly recommend running this on Virtualbox, I had some issues getting it to work in VMware. Additionally DHCP is enabled so you shouldn't have any troubles getting it onto your network. It defaults to bridged mode, but feel free to change that if you like.

****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of Game of Thrones CTF 1

<h1>Game of Thrones Hacking CTF</h1>
<blockquote>
This is a challenge-game to measure your hacking skills. Set in Game of Thrones fantasy world.
</blockquote>
<hr/>
<strong>Goal</strong>:
Get the 7 kingdom flags and the 4 extra content flags (3 secret flags + final battle flag). There are 11 in total.
<strong>Rules/guidelines to play</strong>:

Start your conquer of the seven kingdoms
You'll need hacking skills, no Game of Thrones knowledge is required. But if you play, it may contains spoilers of the TV series
Difficulty of the CTF: Medium-High
Don't forget to take your map (try to find it). It will guide you about the natural flag order to follow over the kingdoms
Listen CAREFULLY to the hints. If you are stuck, read the hints again!
Powerful fail2ban spells were cast everywhere. Bruteforce is not an option for this CTF (2 minutes ban penalty)
The flags are 32 chars strings. Keep'em all! you'll need them

<strong>Requirements/starting guide</strong>:

Import the Linux based CTF challenge virtual machine (OVA file)
OVA file is compatible with Oracle Virtualbox and Vmware
The challenge vm needs 1 cpu and 1512mb RAM to work properly
The challenge vm has its network configured by default as bridge. It will take an IP from the DHCP of your network

<strong>Downloading challenge CTF vm</strong>:

<a href="https://mega.nz/#!EcgHBB4b!UvbxukV_Po0BOALwqyzxqdpxSfPkIzuxiNqEEVgDy8Q">Download Link 1</a> (Mega)
<a href="https://www.dropbox.com/s/q3cv44rm61yella/Game%20of%20Thrones%20CTF%201.0.ova?dl=0">Mirror 1</a> (Dropbox)

<strong>Troubleshooting</strong>

Vmware:
If you get a warning/error importing machine, press "Retry" and it will be imported flawlessly
Oracle Virtualbox
It's recommended to use "Import Appliance" menu option instead of double click on OVA file
If you get an error regarding network, just select your network interface

<h3>Good luck, the old gods and the new will protect you!</h3>
<hr/>
<pre><code> _____                      ___    _____ _                       
|   __|___ _____ ___    ___|  _|  |_   _| |_ ___ ___ ___ ___ ___ 
|  |  | .'|     | -_|  | . |  _|    | | |   |  _| . |   | -_|_ -|
|_____|__,|_|_|_|___|  |___|_|      |_| |_|_|_| |___|_|_|___|___|
</code></pre>
<hr/>
<strong>Designed by/Credits</strong>

Óscar Alfonso (<a href="https://github.com/OscarAkaElvis">OscarAkaElvis</a> or <a href="https://github.com/v1s1t0r1sh3r3">v1s1t0r</a>)
Contact: [<a class="__cf_email__" data-cfemail="7600470547024604584705581e45044536111b171f1a5815191b" href="/cdn-cgi/l/email-protection">[email protected]</a>]
Thanks to the beta testers, specially to j0n3, Kal3l and masAcre
Version 1.0 (September 2017)


****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of d0not5top 1.2

D0Not5top Boot2Root 
This is my second public Boot2Root, It’s intended to be a little more difficult that the last one I made.
That being said, it will depend on you how hard it is :D
It's filled with a few little things to make the player smile.
Again there are a few “Red Herrings”, and enumeration is key.
DIFFICULTY
?????
CAPTURE THE FLAGS <br/>
There are 7 flags to collect, designed to get progressively more difficult to obtain
DETAILS

File: D0Not5top_3mrgnc3_v1.2.ova
OS: ?????
VM Type: VirtualBox
IP Address: DHCP
Size: 700 MB

SUPPORT
Any support issues can be directed to <a class="__cf_email__" data-cfemail="cdfea0bfaaa3aefe8db9a8aea5a4a8e3aea2a0" href="/cdn-cgi/l/email-protection">[email protected]</a>

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of hackfest2016 Sedna

Welcome to Sedna
This is a vulnerable machine i created for the Hackfest 2016 CTF
http://hackfest.ca/
Difficulty : Medium
Tips:
There are multiple way to root this box, if it should work but
doesn't try to gather more info about why its not working.
Goals: This machine is intended to be doable by someone who have
some experience in doing machine on vulnhub
There are 4 flags on this machine
One for a shell
One for root access
Two for doing post exploitation on Sedna
Feedback: This is my second vulnerable machine, please give me
feedback on how to improve !
@ViperBlackSkull on Twitter
<a class="__cf_email__" data-cfemail="94e7fdf9fbfabafafbf8f1e0d4fcfbe0f9f5fdf8baf7fbf9" href="/cdn-cgi/l/email-protection">[email protected]</a>
Special Thanks to madmantm for testing this virtual machine
SHA-256 : 178306779A86965E0361AA20BA458C71F2C7AEB490F5FD8FAAFAEDAE18E0B0BA

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of HackDay Albania

This was used in HackDay Albania's 2016 CTF.
The level is beginner to intermediate . 
It uses DHCP.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of The Pentesters 64-Bit AppSec Primer (Beta)

Welcome to The Pentester’s 64-Bit AppSec Primer and challenge.
Here at The Pentesters, we have a passion for application security and all that goes with it. We think that application security is an extremely important part of the field of information security and have, “made it our business” so to speak to provide a means of education into modern-day application security. With modern computing becoming more and more advanced, and the requirements for understanding the functionality and security behind said computing becoming equally as challenging to understand, we figured that perhaps giving a set of challenges dedicated to learning the mere basics of 64 bit appsec would be beneficial to the security community. 
The 64-Bit AppSec Primer consists of 16 challenges, increasingly more difficult than the previous one, dedicated to learning the basics of 64 bit binary exploitation and reverse engineering. The x64 instruction set, as you would expect, has many new instructions, registers, and calling conventions in comparison to the traditional x86 instruction set. Our goal, with this challenge, is to get you inside a debugger with intentionally vulnerable binaries, and get you looking at the inner-workings of a 64 bit binary. Alongside the increasing complexity of the instruction set, is an equally complexity of exploitation, which as a penetration tester and security engineer, will prove useful to understand.
The challenges consist of varying vulnerabilities and anti-debugger tricks in binaries, such as:

Stack-based Buffer Overflows
Format String Vulnerabilities
Heap-based Buffer Overflows
Detection of tracing
Insecure validation of credentials
and more… don’t want to give you all the good details eh?

As a bonus, we would like to contribute back to the security community. We are donating the VM to Vulnhub, for all to have, and we are also offering prizes to three people who gives us the most robust and complete write-up for the challenges. In order to qualify for the prizes, you must post your write-up on either your personal blog, or website (your choice), and post a link to http://thepentesters.net/challenge/ along with your username. If you are unable to solve all of the challenges, that is okay, we will still accept your write-up for judging, we still want to see what you completed and how you did it. Here are the prizes:

1st Place gets $150.00
2nd Place gets $75.00
3rd Place gets $25.00

The challenge ends on August 31st, 2016. All write-ups must be submitted by then, whoever has written the best write-up with the most detailed explanations wins. The judging will be done by our pentesting team.
Also, I would like to note a couple rules for the reverse engineering challenges.

The challenge must be solved without attacking the encryption of the flag. Spoiler, I used a basic XOR encryption for most of them so they do not show up in strings. So, that is off-limits. The goal is to break the logic of the application. 
Some challenges have several ways of solving and we would like to see how you did it. My C coding skills are most certainly not expertise, but I feel as if this will prove to be a good exercise for many in regards to exploit development and reverse engineering.
All else is fair game!

<strong>Note: ASLR must be disabled, log in as level17:madpwnage, and run “<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>”. Also, challenge 3, is only a DoS challenge. This is the beta, so there are still glitches. If you find any, please contact me at <a class="__cf_email__" data-cfemail="dcbdabb5b0b99ca8b4b9acb9b2a8b9afa8b9aeaff2b2b9a8" href="/cdn-cgi/l/email-protection">[email protected]</a> with your discovery.</strong>
There are a couple challenges that don’t have “flags” but you will know when you have solved those, please note your findings and take screen-shots of them as well. As for the VM, you are to ssh in as user n00b and password n00b where you will find gdb-peda installed for you to make your life easier. The VM gets its IP through DHCP and is set to host-only adapter in VMware, so it should work for you straight out of the box so to speak. That is all I have for you and I hope you enjoy.

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Seattle v0.3

Graceful’s VulnVM is web application running on a virtual machine, it’s designed to simulate a simple eCommerce style website which is purposely vulnerable to a number of well know security issues commonly seen in web applications. This is really a pre-release preview of the project but it’s certainly functional as it stands, but I’m planning on doing a lot of work on this in the near future.
The plan is ultimately to have the application vulnerable to a large number of issues with a selection of different filters at different difficulties that way the as testers become better at detecting and exploiting issues the application can get hardened against common exploitation methods to allow the testers a wider ranger of experiences.
The first filters have now been implemented! The application now supports “levels” where Level 1 includes no real filtration of user input and Level 2 includes a simple filter for each vulnerable function.
Currently it’s vulnerable to:

SQL Injection (Error-based)
SQL Injection (Blind)
Reflected Cross-Site Scripting
Stored Cross-Site Scripting
Insecure Direct-Object Reference
Username Enumeration
Path Traversal
Exposed phpinfo()
Exposed Administrative Interface
Weak Admin Credentials

Extracting the Virtual Machine
Install p7zip to unzip *.7z files on Fedora:
<code>sudo dnf install p7zip</code>
<hr/>
Install p7zip to unzip *.7z files on Debian and Ubuntu:
<code>sudo apt-get install p7zip</code>
<hr/>
Extract the archive:
<code>7z x Seattle-0.0.3.7z</code>
Then you can simply start up the virtual machine using Virtual Box! The root user account has a password of PASSWORD

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Csharp VulnSoap

The CsharpVulnSoap virtual appliance is a purposefully vulnerable SOAP service, focusing on using XML, which is a core feature of APIs implemented using SOAP. The web application, listening on port 80, allows you to list, create, and delete users in the PostgreSQL database. The web application is written in the C# programming language and uses apache+mod_mono to run. The main focus of intentional vulnerabilities was SQL injections.
The vulnerable SOAP service is available on http://&lt;ip&gt;/Vulnerable.asmx, and by appending ?WSDL to the URL, you can get an XML document detailing the functions exposed by the service. Using this document, you can automatically fuzz the endpoint for any vulnerabilities by parsing the document and creating the HTTP requests expected programmatically.
The SQL injections yield a variety of potential exploit techniques since different SQL verbs are used to perform actions against the server. For instance, a SQL injection in an INSERT statement may not be exploitable in the same ways the DELETE or SELECT statements will be. Using a tool like sqlmap will help you learn how to exploit each SQL injection vulnerability using a variety of techniques.
If you are curious how sqlmap is performing the checks for, and ultimately exploiting, the vulnerabilities in the web application, you can use the --proxy option for sqlmap and pass the HTTP requests through Burpsuite. You can then see in the HTTP history tab the raw HTTP requests made by sqlmap.

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of Acid Server

Welcome to the world of Acid.
Fairy tails uses secret keys to open the magical doors.
<h4>SETUP</h4>
The named of the Virtual machine is "<strong>Acid Serve</strong>r". This Virtual Machine is completely <strong>web based</strong>. I have added little new concept here and hope people will enjoy solving this.You need to extract the <strong>rar</strong> and run the <strong>vmx</strong> using <strong>VMplayer</strong> . The machine has <strong>DHCP</strong> active list so once automatically assign an IP network, the next step will be to identify the target and discover the / the service / s to start the game.
<h4>GOAL</h4>
Escalate the privileges to root and capture the flag. Once anyone able to beat the machine then please let me know.
<hr/>
Twitter: <a href="https://twitter.com/m_avinash143">https://twitter.com/m_avinash143</a>
LinkedIn: <a href="https://in.linkedin.com/pub/avinash-thapa/101/406/4b5">https://in.linkedin.com/pub/avinash-thapa/101/406/4b5</a>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of ROP Primer 0.2

Our resident ROP ninja <a href="https://twitter.com/barrebas">barrebas</a> recently gave the team a bootcamp on Return Oriented Programming. The presentation was followed by a demo walkthrough on writing a ROP exploit on a vulnerable application. Since the presentation was well received, he’s decided to make the slides available to everyone. You can view them at <a href="https://speakerdeck.com/barrebas/rop-primer">https://speakerdeck.com/barrebas/rop-primer</a>. 
We hope you enjoy it!
<hr/>
<pre><code>Username: root
Password: toor

Username: level0
Password: warmup
</code></pre>
<hr/>
<pre><code>ROP Primer
----------

This VM is meant as a small introduction to 32-bit return-oriented-programming on Linux. It contains three vulnerable binaries, that must be exploited using ROP.

The machine is built and tested in VirtualBox 4.3.20. It's an Ubuntu 32 bit VM, with ASLR disabled. Useful tools like gdb-peda are installed. A description of the levels, including instructions, can be found on the webserver.

A big shout-out to my team mates of the Vulnhub CTF Team!

@barrebas, March 2015 &amp; June 2015

rop-primer-v0.2.ova:
---------------
MD5:  840c75497f54578497a6e44df2f96047
SHA1: 2cb14d78fd1ff7b5a7895447969fde8ca9c06ef3
</code></pre>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of Pentester Lab CVE-2014-6271: ShellShock

Quickly created an exercise for cve-2014-6271:
Source: <a href="https://twitter.com/PentesterLab/status/515079459284594688">https://twitter.com/PentesterLab/status/515079459284594688</a>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of CySCA CySCA2014-in-a-Box

CySCA2014-in-a-Box is a Virtual Machine that contains most of the challenges faced by players during CySCA2014. It allows players to complete challenges in their own time, to learn and develop their cyber security skills. The VM includes a static version of the scoring panel with all challenges, required files and flags.
To use CySCA2014 in a box virtual machines, players will need to have either Oracle VirtualBox or VMWare Player installed on their machines. Additionally we recommend players have at least 4GB of RAM. If you have less RAM, you can reduce the amount of RAM available to the VM down to 512MB, however it may adversely affect the speed of some of the challenges.
<strong>CAUTION The VM contains software that is deliberately vulnerable. We advise that you do not attach it to a critical network. Consider using your virtualisation softwares host-only network functionality.</strong>

****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab From SQL injection to Shell

<h3>Difficulty</h3>
Beginner
<h3>Details</h3>
This exercise explains how you can from a SQL injection gain access to the administration console. Then in the administration console, how you can run commands on the system.
<h3>What you will learn?</h3>

SQL injection exploitation using UNION
Cracking md5 hashed passwords
Writing a PHP webshell


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of Pentester Lab CVE-2012-6081: MoinMoin code exec

<h3>Difficulty</h3>
Advanced
<h3>Details</h3>
This exercise explains how you can exploit CVE-2012-6081 to gain code execution. This vulnerability was exploited to compromise Debian's wiki and Python documentation website
<h3>What you will learn?</h3>

Exploiting CVE-2012-6081
Basics of the tar file format
Python code execution


****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of VulnOS 1

Welcome to VulnOS !
<hr/>
This is my first vulnerable target I made because I want to give back something to the community.
Big up for the community that made things possible!!!
<hr/>
Your goal is to get root and find all the vulnerabilities inside the OS !
It is a ubuntu server 10.04 LTS
(that's been made very buggy!!!!)
DO NOT USE This Box in a production environment!!!!!!!
It's a VM thas has been made with Virtualbox 4.3.8 - so it's in the .vdi format.
<hr/>
Networking :
This box has been made with bridged networking and uses DHCP to get an IP address (was 192.168.1.66 when I built it).
So it is best to share the attack OS and the TARGET BOX to IP-Range OF 192.168.1.1/24
Maybe you could set it up with m0n0wall and setup static IP-addresses.
If you cannot find the target's IP ADRERSS, contact me @ blakrat1 AT gmail DOT com
I will give you the root user and password to login....
<hr/>
Hope you find this useful !!!

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of HackLAB VulnVPN

The idea behind VulnVPN is to exploit the VPN service to gain access to the sever and ‘internal’ services. Once you have an internal client address there are a number of ways of gaining root (some easier than others).
Client VPN Configuration
I have created/uploaded the relevant files which can be obtained from the compressed file here. You’ll need to configure Openswan/xl2tpd on your system, if you’re using an Ubuntu based Linux variant you can follow the below steps – please note that I’ve used Backtrack 5r3 for all client testing (mentioned as I know it works well):
<ol>

apt-get install openswan xl2tpd ppp


Copy the downloaded client files into the following locations:
/etc/ipsec.conf
/etc/ipsec.secrets
/etc/ppp/options.l2tpd.client
/etc/xl2tpd/xl2tpd.conf


VulnVPN is located at 192.168.0.10 and the client configuration files state that the client IP address is 192.168.0.11. If you want your client to have a different address ensure you change the relevant settings in /etc/ipsec.conf.


To establish a VPN connection run the following command: ipsec auto –up vpn (that’s two hyphens before up, they get lost in the post formatting). If you’re viewing the logs you should see something along the lines of ‘IPsec SA established’.


If the connection succeeds (remember you’ll need to obtain the PSK before this is possible) you can run the ‘start-vpn.sh’ script (included with client config files download) or run the following command to initialise the PPP adaptor: echo “c vpn” &gt; /var/run/xl2tpd/l2tp-control 


Run ip list or ifconfig and you should see that a new PPP adapter has been created and assigned an IP address (this may not be instant, give it a few seconds). If the adaptor fails to come up run the script/command again – I’ve come across this issue a few times.

</ol>
Note: If you change your configuration/IP settings etc you’ll need to reload the relevant configuration files i.e. /etc/init.d/ipsec restart and/or /etc/init.d/xl2tpd restart
Troubleshooting
I realise that VPN’s can be very troublesome (setting this challenge up was bad enough), so I have allowed access to auth and ufw logs. These should help highlight issues you may be experiencing and can be found at http://192.168.0.10:81 (note port 81). Please note that hacking this page and associated scripts are not part of the challenge, rather they have been provided for assistance.
A useful config reference can also be found here:
https://wiki.archlinux.org/index.php/L2TP/IPsec_VPN_client_setup
Download Information
Architecture: x86
Format: VMware (vmx &amp; vmdk) compatibility with version 4 onwards
RAM: 1GB
Network: NAT – Static IP 192.168.0.10 (no G/W or DNS configured)
Extracted size: 1.57GB
Compressed (download size): 368MB – 7zip format – 7zip can be obtained from here
Download VulnVPN from -HERE-
MD5 Hash of VulnVPN.7z: 9568aa4c94bf0b5809cb0a282fffa5c2
Download Client files from -HERE-
MD5 Hash of client.7z: e598887f2e4b18cd415ea747606644f6
As per usual, I shall add a related solutions post shortly. Until then, enjoy 
Source: <a href="http://www.rebootuser.com/?p=1307">http://www.rebootuser.com/?p=1307</a>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of VulnImage 1

"Created for Lars's students"
Source: <em>e-mail</em>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Metasploitable 2

Some folks may already be aware of Metasploitable, an intentionally vulnerable virtual machine designed for training, exploit testing, and general target practice. Unlike other vulnerable virtual machines, Metasploitable focuses on vulnerabilities at the operating system and network services layer instead of custom, vulnerable applications. I am happy to announce the release of Metasploitable 2, an even better punching bag for security tools like Metasploit, and a great way to practice exploiting vulnerabilities that you might find in a production environment.
For download links and a walkthrough of some of the vulnerabilities (and how to exploit them), please take a look at the Metasploitable 2 Exploitability Guide.
Have fun!
Source: <a href="https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2">https://community.rapid7.com/community/metasploit/blog/2012/06/12/introducing-metasploitable-2</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>

****************************************************************************************************
Screenshot of Hackxor 1

About hackxor
Hackxor is a webapp hacking game where players must locate and exploit vulnerabilities to progress through the story. Think WebGoat but with a plot and a focus on realism&amp;difficulty. Contains XSS, CSRF, SQLi, ReDoS, DOR, command injection, etc 
Features:

Client attack simulation using HtmlUnit; no alert('xss') here.
Smooth difficulty gradient from moderately easy to fiendishly tricky.
Realistic vulnerabilities modelled from Google, Mozilla, etc (No rot13!)
Open ended play; progress by any means possible.

Download &amp; install instructions

Download the full version of hackxor (700mb)
Install VMWare Player (This involves creating a free account with vmware)
Extract hackxor1.7z, run the image using VMware player.
Work out what the IP of hackxor is ((try 172.16.93.129)|| logging into the VM with username:root pass:hackxor and typing ifconfig)
Configure your hosts file (/etc/hosts on linux) to redirect the following domains to the IP of hackxor: wraithmail, wraithbox, cloaknet, GGHB, hub71, utrack.
Browse to http://wraithmail:8080 and login with username:algo password:smurf

If you can't edit the hosts file for some reason, you could use the 'Override hostname resolution' option in Burp proxy 
Troubleshooting the installation:

If http://wraithmail:8080 loads everything is probably working.
First: Try 'nmap wraithmail' in a shell to see if port 8080 is open. If it is open, contact me! Otherwise:
Second: Try nmap <theipofhackxor>. If that succeeds, fix your hosts file. Otherwise:</theipofhackxor>
Third: If you really can't get any network contact with the VM, check the VM settings in the VM manager
(this does not involve logging into the virtual machine). Make sure it is set to NAT. If that doesn't fix it:
Fourth: Try changing the VM network setting to 'Bridged'. This will mean other people on the LAN can access it.
Fifth: If all else fails, contact me on twitter.

The scene
You play a professional blackhat hacker hired to track down another hacker by any means possible. Start by checking your email on wraithmail, and see how far down the rabbit hole you can get. The key websites in this game are http://wraithmail:8080 http://cloaknet:8080 http://gghb:8080 and http://hub71:8080 so if you don't feel like tracking down your target you may hack them in any order. Each website will be properly introduced through the plot.
Changes since 1.0

Fixed a potential-lose bug in hub71

Changes since the beta

Made cloaknet (second level) harder/better/more realistic
Added stealth ranking system
Fixed 2 unintentional XSS vulns in rentnet(hub71)
Enhanced rentnet(hub71) session security (You'll see)
Added online demo (first 2 levels)
Improved names/other fluff
Added clear ending
Made VM IP static-ish for easier installation
Made VM only accessible from the host machine by default
Linked sites together better
Added anti-bruteforce protection
Removed numerous bits of test code
Removed a few obscenities
Fixed some inaccuracies&amp;minor bugs

Source: <a href="http://hackxor.sourceforge.net/cgi-bin/index.pl">http://hackxor.sourceforge.net/cgi-bin/index.pl</a>


Process finished with exit code 0
